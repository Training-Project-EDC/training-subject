Metadata-Version: 2.1
Name: edc-form-validators
Version: 0.1.3
Summary: Form validator classes for django ModelForms
Home-page: https://github.com/botswana-harvard/edc-form-validators
Author: Software Engineering & Data Management
Author-email: se-dmc@bhp.org.bw
License: GPL license, see LICENSE
Keywords: django modelform form validation edc
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
License-File: LICENSE

# edc-form-validators

Form validator classes for ModelForms


### ModelForm `FormValidator`

`FormValidator` simplifies common patterns used in `ModelForm.clean`. For example, if there is a response to field A then there should not a be response to B and visa-versa.

Declare a form with it's `form_validator` class and use `FormValidatorMixin`:

        class MyFormValidator(FormValidator):

            def clean(self):
                self.required_if(
                    YES,
                    field='f1',
                    field_required='f2')
                ...

        class MyModelForm(FormValidatorMixin, forms.ModelForm):

            form_validator_cls = MyFormValidator

            class Meta:
                model = TestModel
                fields = '__all__'
 

#### Testing:

Test the `form_validator` without having to instantiate the `ModelForm`:

    def test_my_form_validator(self):
        options = {
            'f1': YES,
            'f2': None}
        form_validator = MyFormValidator(cleaned_data=options)
        self.assertRaises(ValidationError, form_validator.validate)
        self.assertIn('f2', form_validator._errors)


